plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.24.1'
    id 'checkstyle'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
}


group 'edu.kit.rose'
version '1.0'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.8.2'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'edu.kit.rose'
    mainClass = 'edu.kit.rose.view.RoseApplication'
}

checkstyle {
    toolVersion = '8.45'
}

javafx {
    version = '17.0.1'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation('com.google.inject:guice:5.1.0')
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.1'

    implementation('org.jgrapht:jgrapht-core:1.5.1')
    implementation 'junit:junit:4.13.1'

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testImplementation('org.mockito:mockito-core:4.3.1')
    testImplementation ('org.testfx:testfx-junit5:4.0.15-alpha')
}

test {
    useJUnitPlatform()
    //Options for TestFX
    jvmArgs = [
            '--add-opens', "$moduleName/edu.kit.rose=org.testfx.junit5",
            '--add-opens', "$moduleName/edu.kit.rose.view.panel.segmentbox=org.testfx.junit5",
            '--add-opens', 'javafx.graphics/com.sun.javafx.application=org.testfx'
    ]
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(it)
                    .exclude("edu/kit/rose/view")
                    .exclude("edu/kit/rose/controller/measurement")
                    .exclude("edu/kit/rose/model/roadsystem/measurements")
        }))
    }
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

sonarqube {
    properties {
        property "sonar.projectKey", "psege_rose_AX9hHSxrKw6c9ZNKKE-D"
        property "sonar.qualitygate.wait", true
    }
}
